package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop/v5"
  "github.com/gobuffalo/x/responder"
  "github.com/todos-api/coke/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Todo)
// DB Table: Plural (todos)
// Resource: Plural (Todos)
// Path: Plural (/todos)
// View Template Folder: Plural (/templates/todos/)

// TodosResource is the resource for the Todo model
type TodosResource struct{
  buffalo.Resource
}

// List gets all Todos. This function is mapped to the path
// GET /todos
func (v TodosResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  todos := &models.Todos{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Todos from the DB
  if err := q.All(todos); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("todos", todos)
    return c.Render(http.StatusOK, r.HTML("/todos/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(todos))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(todos))
  }).Respond(c)
}

// Show gets the data for one Todo. This function is mapped to
// the path GET /todos/{todo_id}
func (v TodosResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Todo
  todo := &models.Todo{}

  // To find the Todo the parameter todo_id is used.
  if err := tx.Find(todo, c.Param("todo_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("todo", todo)

    return c.Render(http.StatusOK, r.HTML("/todos/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(todo))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(todo))
  }).Respond(c)
}

// Create adds a Todo to the DB. This function is mapped to the
// path POST /todos
func (v TodosResource) Create(c buffalo.Context) error {
  // Allocate an empty Todo
  todo := &models.Todo{}

  // Bind todo to the html form elements
  if err := c.Bind(todo); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(todo)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("todo", todo)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/todos/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "todo.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/todos/%v", todo.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(todo))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(todo))
  }).Respond(c)
}

// Update changes a Todo in the DB. This function is mapped to
// the path PUT /todos/{todo_id}
func (v TodosResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Todo
  todo := &models.Todo{}

  if err := tx.Find(todo, c.Param("todo_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Todo to the html form elements
  if err := c.Bind(todo); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(todo)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("todo", todo)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/todos/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "todo.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/todos/%v", todo.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(todo))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(todo))
  }).Respond(c)
}

// Destroy deletes a Todo from the DB. This function is mapped
// to the path DELETE /todos/{todo_id}
func (v TodosResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Todo
  todo := &models.Todo{}

  // To find the Todo the parameter todo_id is used.
  if err := tx.Find(todo, c.Param("todo_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(todo); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "todo.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/todos")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(todo))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(todo))
  }).Respond(c)
}
